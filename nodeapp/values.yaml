replicaCount: 1

image:
  repository: trydocker123/nodeapp
  pullPolicy: IfNotPresent
  tag: "latest"
  env:
    name: 'REDIS_URL'
    value: 'node-app-chart-redis-master'
  ports:
    containerPort: 3000
    hostPort: 8081

imagePullSecrets: []
nameOverride: "node-app-chart"
fullnameOverride: "node-app-chart"


serviceAccount:
  create: true
  annotations: {}
  name: "node-app-chart"

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8081
  targetPort: 3000

ingress:
  enabled: true
  className: nginx
  hosts:
    - host: node-app.local
      paths:
        - path: /
          pathType: Prefix

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    livenessProbe:
      periodSeconds: 10
    readinessProbe:
      timeoutSeconds: 5

tests:
  app:
    host: node-app.local

kibana:
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 12
    successThreshold: 3
    timeoutSeconds: 12
  elasticsearchHosts: "http://elasticsearch-master:9200"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: kibana.local
        paths:
          - path: /

elasticsearch:
  replicas: 1
  minimumMasterNodes: 1
  clusterHealthCheckParams: 'wait_for_status=yellow&timeout=1s'
  ingress:
    enabled: true
    hosts:
      - host: elasticsearch.local
        paths:
          - path: /

logstash:
  persistence:
    enabled: true

  logstashConfig:
    logstash.yml: |
      http.host: 0.0.0.0
      xpack.monitoring.enabled: false

  logstashPipeline: 
  logstash.conf: |
      input {
        beats {
          port => 5044
        }
      }
      output {
        elasticsearch {
          hosts => "http://elasticsearch-master.logging.svc.cluster.local:9200"
          manage_template => false
          index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
          document_type => "%{[@metadata][type]}"
        }
      }

  service:
    type: ClusterIP
    ports:
      - name: beats
        port: 5044
        protocol: TCP
        targetPort: 5044
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080

filebeat:
  daemonset:
    filebeatConfig:
      filebeat.yml: |
        filebeat.inputs:
        - type: container
          paths:
            - /var/log/containers/*.log
          processors:
          - add_kubernetes_metadata:
              host: ${NODE_NAME}
              matchers:
              - logs_path:
                  logs_path: "/var/log/containers/"
        output.logstash:
          hosts: ["node-app-chart-logstash:5044"]